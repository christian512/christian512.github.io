---
layout: post
title:  "New Repository for QuTiP Notebooks"
---

I am starting a bit early with the project work, but I have a pretty free
schedule, and the community meetings are planned for the coming days. So, after
an initial meeting with my mentors, I started working on a new repository.

## QuTiP Tutorials

As I wrote in the previous blog post, my project focus lies on the Jupyter
Notebooks provided with QuTiP. An overview of these notebooks is given on
the [QuTiP website](qutip.org/tutorials). The overview page refers to notebooks
from two
repositories: [qutip-lectures](https://github.com/jrjohansson/qutip-lectures)
and [qutip-notebooks](https://github.com/qutip/qutip-notebooks).

Both repositories are rather old and have not been updated too much recently,
resulting in problems when running the notebooks with the current version of
QuTiP. Instead of updating both repositories, we decided to create one new
repository and add all relevant content to it throughout this project. This
also has the advantage that we can set up an infrastructure for Jupyter
Notebooks from the beginning. Here, I describe a first part of the
infrastructure, and why it is needed.

The new repository can be found
here: [qutip-tutorials](https://github.com/qutip/qutip-tutorials).

## Jupyter Notebooks in Git

If you ever added a Jupyter Notebook to a Git repository, you might have
realized that committing changes to a notebook is annoying. The actual
change you made is
hidden under a huge pile of other changes, which are generated by the
re-execution of the notebook. For example, the *execution counters* changed
or some cell output varies slightly
due to numerical integration. All these changes are tracked by Git, while you
only want to see the small change you made in one cell of the notebook.

One way of overcoming this problem is
using [Jupytext](https://jupytext.readthedocs.io/en/latest/). It is a tool to
convert Jupyter Notebooks to plain text files (like a MarkDown file). I won't go
into detail with this package, as it has a great documentation. But there are
two things which I found especially interesting.

### Editing Markdown Notebooks

Assuming you have a notebook file `test.ipynb`, the conversion to a markdown
file is as simple as executing:

```
jupytext --to markdown test.ipynb
```

This generates a new markdown file named `test.md`, which includes all the input
cells of the notebook, but the outputs are automatically removed. You can now
edit this MarkDown file in the editor of your choice. But the other option,
which I think is not so apparent from the documentation, is to open `test.md` in
the Jupyter Notebook frontend (which you start by `jupyter notebook`). Jupyter
Notebook recognizes that `test.md` was generated from a notebook and loads it as
a notebook. I.e., you can execute the cells and edit as a usual notebook. The
changes are directly saved in the markdown file (but again, only the inputs).
This makes the process of editing the notebooks much easier. Initially, I
thought you had to convert `test.md` back to a notebook, edit and test, then
convert back. But directly editing the markdown file is as simple as it can get.

### Removing metadata

Jupytext removes most of the unnecessary metadata in the notebook automatically.
Hence the markdown file is relatively clean. However, not all metadata is
removed automatically. For example, I used the PyCharm IDE to edit the notebooks
and PyCharm inserts metadata for, I guess, display purposes. We don't want this
metadata in our Github repository because not everyone uses PyCharm (Someone
recently opened an [issue](https://youtrack.jetbrains.com/issue/PY-54377) about
having the option to disable this behavior).

We can use the metadata filtering provided by Jupytext to remove the PyCharm
metadata. To do so, we create a config file in the repository's root directory
named `.jupytext`.
The filtering follows a simple rule (also
described [here](https://jupytext.readthedocs.io/en/latest/config.html#metadata-filtering))
. To filter out the metadata named `pycharm` in each cell of the notebook, we
add the following line to the config file:

`cell_metadata_filter = "-pycharm"`

When converting a notebook using Jupytext it automatically recognizes the config
file and filters the metadata accordingly.

## Plan for QuTiP tutorials

The idea for the new repository is to add all notebooks in the markdown format
to allow clean and easy edits of the contents. However, we also need to provide
versions of the notebooks with outputs, so new users can see, without executing
the notebook themselves, what some function of QuTiP does. Therefore I have
already set up a GitHub Action, which I will write about in the next blog post.

## Other contributions to QuTiP

* [PR-1098](https://github.com/qutip/qutip/pull/1908) - Fix problems in the 
  HEOMSolver with progress bar and returning states
